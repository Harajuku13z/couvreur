<?php

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

use Illuminate\Support\Facades\Http;

echo "üîç Diagnostic de l'API OpenAI\n";
echo "============================\n\n";

try {
    // 1. V√©rifier la cl√© API
    echo "1. V√©rification de la cl√© API...\n";
    $apiKey = setting('chatgpt_api_key');
    if ($apiKey) {
        echo "‚úÖ Cl√© API configur√©e: " . substr($apiKey, 0, 10) . "...\n";
    } else {
        echo "‚ùå Cl√© API non configur√©e\n";
        exit(1);
    }
    echo "\n";
    
    // 2. Test simple de l'API
    echo "2. Test simple de l'API OpenAI...\n";
    
    $response = Http::withHeaders([
        'Authorization' => 'Bearer ' . $apiKey,
        'Content-Type' => 'application/json',
    ])->post('https://api.openai.com/v1/chat/completions', [
        'model' => 'gpt-3.5-turbo',
        'messages' => [
            ['role' => 'user', 'content' => '√âcris une phrase sur la r√©novation de toiture.'],
        ],
        'max_tokens' => 100,
        'temperature' => 0.7,
    ]);
    
    if ($response->successful()) {
        $responseData = $response->json();
        $content = $responseData['choices'][0]['message']['content'] ?? '';
        echo "‚úÖ API fonctionne: " . $content . "\n";
    } else {
        echo "‚ùå Erreur API: " . $response->status() . "\n";
        echo "   R√©ponse: " . $response->body() . "\n";
    }
    echo "\n";
    
    // 3. Test avec le mod√®le configur√©
    echo "3. Test avec le mod√®le configur√©...\n";
    $model = setting('chatgpt_model', 'gpt-4o');
    echo "   Mod√®le: {$model}\n";
    
    $response = Http::withHeaders([
        'Authorization' => 'Bearer ' . $apiKey,
        'Content-Type' => 'application/json',
    ])->post('https://api.openai.com/v1/chat/completions', [
        'model' => $model,
        'messages' => [
            ['role' => 'system', 'content' => 'Tu es un expert en r√©daction web SEO sp√©cialis√© dans la r√©novation de b√¢timents.'],
            ['role' => 'user', 'content' => '√âcris un paragraphe sur l\'hydrofuge de toiture.'],
        ],
        'max_tokens' => 200,
        'temperature' => 0.7,
    ]);
    
    if ($response->successful()) {
        $responseData = $response->json();
        $content = $responseData['choices'][0]['message']['content'] ?? '';
        echo "‚úÖ Mod√®le {$model} fonctionne: " . substr($content, 0, 100) . "...\n";
    } else {
        echo "‚ùå Erreur avec le mod√®le {$model}: " . $response->status() . "\n";
        echo "   R√©ponse: " . $response->body() . "\n";
    }
    echo "\n";
    
    // 4. Test avec un prompt plus long
    echo "4. Test avec un prompt plus long...\n";
    
    $longPrompt = "Tu es un r√©dacteur web professionnel et expert en r√©novation de b√¢timents.

MISSION : R√©diger un article complet, informatif et optimis√© SEO sur le sujet : Comment hydrofuger sa toiture pour une protection optimale

STRUCTURE HTML OBLIGATOIRE :
<div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">
    <h1 class=\"text-4xl font-bold text-gray-900 mb-6 text-center\">Comment hydrofuger sa toiture pour une protection optimale</h1>
    
    <div class=\"bg-white p-6 rounded-xl shadow mb-6 hover:shadow-lg transition duration-300\">
        <h2 class=\"text-2xl font-semibold text-gray-800 my-4\">üè† Introduction</h2>
        <p class=\"text-gray-700 text-base leading-relaxed mb-4\">[Introduction engageante avec statistiques]</p>
    </div>
    
    <div class=\"bg-white p-6 rounded-xl shadow mb-6 hover:shadow-lg transition duration-300\">
        <h2 class=\"text-2xl font-semibold text-gray-800 my-4\">üõ†Ô∏è Techniques d'hydrofuge</h2>
        <p class=\"text-gray-700 text-base leading-relaxed mb-4\">[Contenu technique d√©taill√©]</p>
    </div>
    
    <div class=\"bg-white p-6 rounded-xl shadow mb-6 hover:shadow-lg transition duration-300\">
        <h2 class=\"text-2xl font-semibold text-gray-800 my-4\">üí° Conseils pratiques</h2>
        <p class=\"text-gray-700 text-base leading-relaxed mb-4\">[Conseils pratiques]</p>
    </div>
    
    <div class=\"bg-green-50 p-4 rounded-lg mb-4\">
        <h2 class=\"text-2xl font-semibold text-gray-800 my-4\">‚ùì Questions Fr√©quentes</h2>
        <div class=\"mb-4\">
            <h3 class=\"font-bold text-gray-800\">Qu'est-ce que l'hydrofuge ?</h3>
            <p class=\"text-gray-700\">[R√©ponse d√©taill√©e]</p>
        </div>
    </div>
    
    <div class=\"bg-white p-6 rounded-xl shadow mb-6 hover:shadow-lg transition duration-300\">
        <h2 class=\"text-2xl font-semibold text-gray-800 my-4\">üéØ Conclusion</h2>
        <p class=\"text-gray-700 text-base leading-relaxed mb-4\">[Conclusion avec appel √† l'action]</p>
    </div>
</div>

CONTENU √Ä G√âN√âRER (2000-3000 mots) :
‚Ä¢ Article original et informatif sur l'hydrofuge de toiture
‚Ä¢ Contenu technique d√©taill√© et pr√©cis
‚Ä¢ Conseils pratiques pour les propri√©taires
‚Ä¢ Statistiques et donn√©es concr√®tes
‚Ä¢ FAQ pertinente avec 5-7 questions
‚Ä¢ Ton professionnel mais accessible

IMPORTANT :
‚Ä¢ G√©n√©rer UNIQUEMENT le HTML complet
‚Ä¢ Ne pas inclure de texte explicatif
‚Ä¢ Utiliser des emojis appropri√©s
‚Ä¢ Rendre le contenu actionnable
‚Ä¢ Optimiser pour le SEO

G√©n√®re maintenant l'article HTML complet sur l'hydrofuge de toiture.";
    
    echo "   Longueur du prompt: " . strlen($longPrompt) . " caract√®res\n";
    
    $response = Http::withHeaders([
        'Authorization' => 'Bearer ' . $apiKey,
        'Content-Type' => 'application/json',
    ])->post('https://api.openai.com/v1/chat/completions', [
        'model' => $model,
        'messages' => [
            ['role' => 'system', 'content' => 'Tu es un expert en r√©daction web SEO sp√©cialis√© dans la r√©novation de b√¢timents.'],
            ['role' => 'user', 'content' => $longPrompt],
        ],
        'max_tokens' => 4000,
        'temperature' => 0.7,
        'top_p' => 0.9,
        'frequency_penalty' => 0.1,
        'presence_penalty' => 0.1,
    ]);
    
    if ($response->successful()) {
        $responseData = $response->json();
        $content = $responseData['choices'][0]['message']['content'] ?? '';
        echo "‚úÖ Prompt long fonctionne (" . strlen($content) . " caract√®res)\n";
        
        // Sauvegarder le r√©sultat
        file_put_contents('debug-openai-result.html', $content);
        echo "   üìÑ R√©sultat sauvegard√© dans: debug-openai-result.html\n";
        
        // V√©rifier le contenu
        if (strpos($content, 'hydrofuge') !== false) {
            echo "   ‚úÖ Contenu sp√©cifique d√©tect√©\n";
        } else {
            echo "   ‚ùå Contenu g√©n√©rique\n";
        }
        
        if (strpos($content, 'max-w-7xl') !== false) {
            echo "   ‚úÖ Structure HTML d√©tect√©e\n";
        } else {
            echo "   ‚ùå Structure HTML manquante\n";
        }
        
    } else {
        echo "‚ùå Erreur avec le prompt long: " . $response->status() . "\n";
        echo "   R√©ponse: " . $response->body() . "\n";
    }
    
    echo "\nüéØ R√©sum√© du diagnostic:\n";
    echo "========================\n";
    echo "‚úÖ Cl√© API: Configur√©e\n";
    echo "‚úÖ Test simple: " . ($response->successful() ? 'R√©ussi' : '√âchec') . "\n";
    echo "‚úÖ Mod√®le {$model}: " . ($response->successful() ? 'Fonctionne' : 'Probl√®me') . "\n";
    echo "‚úÖ Prompt long: " . ($response->successful() ? 'Fonctionne' : '√âchec') . "\n";
    echo "\nüí° Si tous les tests passent, le probl√®me vient du contr√¥leur.\n";
    echo "   Si les tests √©chouent, v√©rifiez votre cl√© API OpenAI.\n";
    
} catch (Exception $e) {
    echo "‚ùå Erreur lors du diagnostic: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
}
