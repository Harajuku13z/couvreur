<?php

// Script de diagnostic pour les services
require_once 'vendor/autoload.php';

use App\Models\Setting;
use Illuminate\Support\Facades\DB;

echo "üîç Diagnostic des services\n";
echo "========================\n\n";

// V√©rifier la connexion √† la base de donn√©es
try {
    DB::connection()->getPdo();
    echo "‚úÖ Connexion √† la base de donn√©es : OK\n";
} catch (Exception $e) {
    echo "‚ùå Connexion √† la base de donn√©es : √âCHEC\n";
    echo "Erreur : " . $e->getMessage() . "\n";
    exit(1);
}

// V√©rifier la table settings
echo "\nüìã V√©rification de la table settings :\n";
if (DB::getSchemaBuilder()->hasTable('settings')) {
    $settingsCount = DB::table('settings')->count();
    echo "‚úÖ Table settings : {$settingsCount} enregistrements\n";
    
    // V√©rifier la cl√© services
    $servicesSetting = DB::table('settings')->where('key', 'services')->first();
    if ($servicesSetting) {
        echo "‚úÖ Cl√© 'services' trouv√©e dans settings\n";
        echo "üìÑ Valeur brute : " . substr($servicesSetting->value, 0, 200) . "...\n";
        
        // D√©coder le JSON
        $services = json_decode($servicesSetting->value, true);
        if (is_array($services)) {
            echo "‚úÖ Services d√©cod√©s : " . count($services) . " services\n";
            foreach ($services as $index => $service) {
                echo "  - Service {$index}: " . ($service['name'] ?? 'Sans nom') . " (ID: " . ($service['id'] ?? 'N/A') . ")\n";
            }
        } else {
            echo "‚ùå Erreur de d√©codage JSON des services\n";
            echo "Erreur JSON : " . json_last_error_msg() . "\n";
        }
    } else {
        echo "‚ùå Cl√© 'services' non trouv√©e dans settings\n";
    }
} else {
    echo "‚ùå Table settings manquante\n";
}

// V√©rifier les services via le mod√®le Setting
echo "\nüîß V√©rification via le mod√®le Setting :\n";
try {
    $servicesData = Setting::get('services', '[]');
    echo "‚úÖ Services via Setting::get : " . (is_string($servicesData) ? 'String' : 'Array') . "\n";
    
    if (is_string($servicesData)) {
        $services = json_decode($servicesData, true);
        if (is_array($services)) {
            echo "‚úÖ Services d√©cod√©s : " . count($services) . " services\n";
        } else {
            echo "‚ùå Erreur de d√©codage JSON\n";
        }
    } elseif (is_array($servicesData)) {
        echo "‚úÖ Services d√©j√† en array : " . count($servicesData) . " services\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erreur lors de la r√©cup√©ration des services : " . $e->getMessage() . "\n";
}

// V√©rifier les r√©pertoires d'images
echo "\nüìÅ V√©rification des r√©pertoires d'images :\n";
$imagePaths = [
    'storage/app/public/uploads/services' => 'R√©pertoire services',
    'public/storage' => 'Lien symbolique public/storage'
];

foreach ($imagePaths as $path => $description) {
    $fullPath = base_path($path);
    if (is_dir($fullPath)) {
        $files = glob($fullPath . '/*');
        echo "‚úÖ {$description} : " . count($files) . " fichiers\n";
    } else {
        echo "‚ùå {$description} : R√©pertoire manquant\n";
    }
}

echo "\nüéØ Recommandations :\n";
echo "- Si les services ne s'affichent pas, v√©rifiez la cl√© 'services' dans la table settings\n";
echo "- Si les images ne s'affichent pas, v√©rifiez le lien symbolique public/storage\n";
echo "- Si la suppression ne fonctionne pas, v√©rifiez les permissions de la base de donn√©es\n";
